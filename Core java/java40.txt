Vector
=======
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

In Vector, all methods are synchronized.

Vector class contains following methods.
ex:
	 public synchronized void addElement(E);
	 public synchronized void removeElementAt(int);	
	 public synchronized E firstElement();
  	 public synchronized E lastElement();
	 public synchronized void removeAllElements();
	 public synchronized void insertElementAt(E, int);
	 and etc.
	
ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity());
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]
		System.out.println(v.firstElement());//1
		System.out.println(v.lastElement());//10

		v.removeElementAt(5);
		System.out.println(v);//[1,2,3,4,5,7,8,9,10]

		v.insertElementAt(6,5);
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		v.removeAllElements();
		System.out.println(v); //[]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity());
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]
		System.out.println(v.get(0));//1
		System.out.println(v.get(v.size()-1));//10

		v.remove(5);
		System.out.println(v);//[1,2,3,4,5,7,8,9,10]

		v.add(5,6);
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		v.clear();
		System.out.println(v); //[]
	}
}

Q) What is the difference between ArrayList and Vector?

ArrayList					Vector
-----------					------------
Methods are not synchronized.			Methods are synchronized.

At a time multiple threads are allowed to	At a time only one thread is allowed to operate
operate on ArrayList object.Hence ArrayList	on Vector object.Hence Vector is thread safe.
is not thread safe.

Relatively performance is high because there	Relatively performance is low because there is a 
is no waiting threads.				waiting threads.

It is a non-legacy class.			It is a legacy class.

It is introduced in 1.2v.			It is introduced in 1.0v.


Stack
=====
It is a child class of Vector class.

If we depends upon Last In First Out order(LIFO) then we need to use Stack.

constructor
-----------

	Stack s=new Stack();

Methods
-------
1) push(Object o)
---------------
	It is used to push the element to the stack.

2) pop()
-------
	It is used to pop the element from stack.

3) peek()
--------
	It returns toppest element of a stack.

4) isEmpty()
-----------
	It is used to check stack is empty or not.

5) search(E)
----------
	It returns offset value if element is found otherwise it will return -1.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Stack<String> s=new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);//[A,B,C]

		s.pop();
		System.out.println(s);//[A,B]

		System.out.println(s.peek());//B

		System.out.println(s.isEmpty());//false 

		System.out.println(s.search("Z")); // -1

		System.out.println(s.search("A")); // 2

	}
}

Q) Write a java program to check given string is balanced or not?

input:
	{[()]}

Output:
	It is a balanced string 

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		String str="{[()]}";
		if(isBalanced(str.toCharArray()))
			System.out.println("It is a balanced string");
		else
			System.out.println("It is not a balanced string");
	}
	public static boolean isBalanced(char[] carr)
	{
		Stack<Character> stack=new Stack<Character>();

		for(char ch:carr)
		{
			if(ch=='{'|| ch=='[' || ch=='(')
			{
				stack.push(ch);
			}
			else if(ch==')' && !stack.isEmpty() && stack.peek()=='(')
			{
				stack.pop();
			}
			else if(ch==']' && !stack.isEmpty() && stack.peek()=='[')
			{
				stack.pop();
			}
			else if(ch=='}' && !stack.isEmpty() && stack.peek()=='{')
			{
				stack.pop();
			}
			else
			{
				return false;
			}
			
		}
		return stack.isEmpty();
	}
}


Set
====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicates are not allowed and order is not preserved then we need to use Set interface.

Diagram: java40.1


HashSet
=======
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		HashSet hs=new HashSet();
		hs.add("six");
		hs.add("nine");
		hs.add("three");
		hs.add("one");
		System.out.println(hs);//[nine, six, one, three]

		hs.add("six");
		System.out.println(hs);//[nine, six, one, three]

		hs.add(10);
		System.out.println(hs);//[nine, six, one, 10, three]
		
		hs.add(null);
		System.out.println(hs);//[null, nine, six, one, 10, three]
	}
}

linkedHashSet
==============
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet						LinkedHashSet
-----------------				--------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("six");
		lhs.add("nine");
		lhs.add("three");
		lhs.add("one");
		System.out.println(lhs);//[six,nine,three,one]

		lhs.add("six");
		System.out.println(lhs);//[six,nine,three,one]

		lhs.add(10);
		System.out.println(lhs);//[six,nine,three,one,10]
		
		lhs.add(null);
		System.out.println(lhs);//[six,nine,three,one,10,null]
	}
}

TreeSet
========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes sorting order.

Hetrogeneous objects are not allowed.

If we insert hetrogeneos object then we will get ClassCastException.

Null insertion is not possible. 

If we insert null then we will get NullPointerException.

ex:
---

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[1,3,5,10]
		
		ts.add(1);
		System.out.println(ts);//[1,3,5,10]

		//ts.add("hi");
		//System.out.println(ts);// R.E ClassCastException
		
		//ts.add(null);
		//System.out.println(ts);// R.E NullPointerException
	}
}



Q) What is the difference between Comparable and Comparator interface?

Comparable
----------
Comparable is an interface which is present in java.lang package.

Comparable interface contains only one method i.e compareTo() method.

If we depends upon default natural sorting order then we need to use Comparable interface.

ex:
	obj1.compareTo(obj2)

	It returns -ve if obj1 comes before obj2.
	It returns +ve if obj1 comes after  obj2.
	It returns 0 if both objects are same.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		System.out.println("A".compareTo("Z")); // -25

		System.out.println("Z".compareTo("A")); // +25

		System.out.println("K".compareTo("K")); // 0
	}
}

Comparator
-----------
Comparator is an interface which is present in java.util package.

Comparator interface contains following two methods i.e compare() method and equals() method.

If we depends upon customized sorting order then we need to use Comparator interface.

ex:
	public int compare(Object obj1,Object obj2)

	It returns +ve if obj1 comes before obj2.
	It returns -ve if obj1 comes after obj2.
	It returns 0 if both objects are same.

Implementation of compare() method is mandatory.

But implementation of equals() method is optional because it is present in Object class which is available to the class through inheritance.

ex:
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[10, 5, 3, 1]
		
	}
}

class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else
			return 0;
	}
}

ex:
--
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[1, 3, 5, 10]
		
	}
}

class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else
			return 0;
	}
}












































































