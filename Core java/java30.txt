Q) Can we overload main method in java?

Yes, we can overload main method in java but JVM always executes main method with String[] parameter.

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		System.out.println("String[] parameter");
	}
	public static void main(int[] iargs) 
	{
		System.out.println("int[] parameter");
	}
}

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		System.out.println("String[] parameter");
		main(new int[]{10,20,30});
	}
	public static void main(int[] iargs) 
	{
		System.out.println("int[] parameter");
	}
}


Method overriding
=================
Having same method name with same parameters in two different classes is called method overriding.

Methods which are present in parent class are called overridden methods.

Methods which are present in child class are called overriding methods.

In method overriding, method resolution will taken care by a JVM based on runtime object.

ex:
---
class Parent 
{
	//overridden methods 
	public void property()
	{
		System.out.println("Land+Cash+House");
	}
	public void marry()
	{
		System.out.println("Trisha");
	}
}
class Child extends Parent 
{
	//overriding methods 
	public void marry()
	{
		System.out.println("Rashmika");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property(); // Land+Cash+House
		p.marry(); // Trisha 
		
		Child c=new Child();
		c.property(); // Land+Cash+House
		c.marry(); // Rashmika
		
		Parent p1=new Child();
		p1.property(); // Land+Cash+House
		p1.marry(); // Rashmika
	}
}

If we declare any method as final overriding of that method is not possible.

ex:

class Parent 
{
	public final void property()
	{
		System.out.println("House-Not For Sale");
	}
}
class Child extends Parent 
{
	public void property()
	{
		System.out.println("House- For Sale");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property(); // House-Not For Sale
	}
}

ex:
---
class Parent 
{
	public final void property()
	{
		System.out.println("House-Not For Sale");
	}
}
class Child extends Parent 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property(); // House-Not For Sale
		
		Child c=new Child();
		c.property(); // House-Not For Sale
	}
}


If a parent class don't want to share any property to child class then we need to use private modifier.

ex:

class Parent 
{
	private void company()
	{
		System.out.println("QualityThought");
	}
	protected void property()
	{
		System.out.println("House");
	}
}
class Child extends Parent 
{
		
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property(); // House
		
		Child c=new Child();
		c.property(); //House 
	}
}

Method hiding
===============
Method hiding is exactly same method overriding with following differences.


Method overriding				Method hiding
------------------				----------------
All methods present in method overriding 	All methods present in method hiding must be  
must be non-static.				static.
	
Method resolution will taken care by a JVM	Method resolution will taken care by a compiler
based on runtime object.			based on reference type.

It is also known as runtime polymorphism, 	It is also known as compile time polymorphism, 
dynamic polymorphism or late binding.		static polymorphism or early binding.


ex:

class Parent 
{
	//overridden methods 
	public static void property()
	{
		System.out.println("Land+Cash+House");
	}
	public static void marry()
	{
		System.out.println("Trisha");
	}
}
class Child extends Parent 
{
	//overriding methods 
	public static void marry()
	{
		System.out.println("Rashmika");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property(); // Land+Cash+House
		p.marry(); // Trisha 
		
		Child c=new Child();
		c.property(); // Land+Cash+House
		c.marry(); // Rashmika
		
		Parent p1=new Child();
		p1.property(); // Land+Cash+House
		p1.marry(); // Trisha 
	}
}

Q) Can we override main method in java?

No, we can't override main method in java because it is static.


Q) What is the difference between Method overloading and Method overriding? 
 
Method overloading 				Method overriding 
--------------------				-------------------
Having same method names with difference 	Having same method name with same 	
signatures in a single class is called 		signatures in two different classes is called 
method overloading. 				method overriding.

It is a compile time polymorphism. 		It is runtime polymorphism.
 
Method resolution taken care by compiler 	Method resolution taken care by JVM 
based on reference type. 			based on runtime object.
 
Private and final methods can be overloaded. 	Private and final methods canâ€™t be overridden. 


Polymorphism
==============
Polymorphism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in a different forms is called polymorphism.

The main objective of polymorphism is to provide flexibility.

Diagram: java30.1

In java , polymorhism is divided into two types.

1) Compile time polymorphism 

2) Runtime polymorphism 

1) Compile time polymorphism 
-----------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.

It is also known as static polymorphism or early binding.

ex:
	Method overloading 
	Method hiding 


2) Runtime polymorphism 
-----------------------
A polymorphism which exhibits at runtime is called runtime polymorphism.

It is also known as dynamic polymorphism or late binding.

ex:
	Method overriding 

Diagram: java30.2


Constructor
=============
It is a special method which is used to initialized an object.

Having same name as class name is called constructor.

A constructor will execute when we create an object.

A constructor does not allow any returntype.

A constructor will accept following modifiers.
ex:
	default
	public
	private 
	protected 

In java, constructors are divided into two types.

1) Userdefined constructor 

2) Default constructor 

1) Userdefined constructor 
------------------------
If a constructor is created by the user based on the application requirement is called user defined constructor.

It is classified into two types.

i) Zero-Argument constructor 

ii) Parameterized constructor 


i) Zero-Argument constructor 
------------------------------
Suppose if we are not passing any argument to userdefined constructor then that constructor is called zero argument constructor.

ex:
	
class Test 
{
	Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args)
	{
		System.out.println("Main-Method");
	}
}
o/p:
	Main-Method 

ex:2
---
class Test 
{
	public Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args)
	{
		Test t=new Test();
	}
}
o/p:
	0-arg const 

ex:3
---
class Test 
{
	private Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args)
	{
		System.out.println("Main-Method");
		Test t=new Test();
	}
}
o/p:
	Main-Method
	0-arg const 

ex:4
----
class Test 
{
	protected Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		System.out.println("Main-Method");
		Test t2=new Test();
	}
}
o/p:
	0-arg const 
	Main-Method
	0-arg const 

ii) Parameterized constructor 
-----------------------------
Suppose if we are passing atleast one argument to userdefined constructor then it is called parameterized constructor.

ex:
---
class Employee
{
	private int empId;
	private String empName;
	private double empSal;
	
	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public void getEmployeeDetails()
	{
		System.out.println("Employee Id : "+empId);
		System.out.println("Employee Name : "+empName);
		System.out.println("Employee Salary : "+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan Morries",1000d);
		e.getEmployeeDetails();
	}
}


2) Default constructor
----------------------
It is a compiler generated constructor for every java program where we are not defining atleast zero argument constructor.

To see the default constructor we need to use below command.
ex:
	javap   -c   Test

Diagram: java30.3 

Q) What is constructor overloading?

Having same constructor name with different parameters in a single class is called contructor overloading.

class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}












































































































