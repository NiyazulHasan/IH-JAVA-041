Q) What is the difference between POJO and Java Bean class?

POJO						Java Bean 
----------					-----------
It can't be serialized.				It can be serialized.

Fields can have any visibility.			Fields can have only private visibility.

It may or may not have 0-arg constructor.	It must have 0-arg constructor.

It does not extends any other class.		It can extends.

It does not implements any other interface.	It can implements.

It does not use outside annotations.		It can use outside annotations.

Note:
----
	Every JavaBean class is a POJO class.
	But every POJO class is not a JavaBean class.


Is-A relationship
=================
Is-A relationship is also known as inheritance.

Using extends keyword we can implements Is-A relationship.

The main objective of Is-A relationship is to provide reusability.

ex:
---
class Parent 
{
	public void methodOne()
	{
		System.out.println("Parent-MethodOne");
	}
}
class Child extends Parent 
{
	public void methodTwo()
	{
		System.out.println("Child-MethodTwo");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.methodOne();
		
		Child c=new Child();
		c.methodOne();
		c.methodTwo();
		
		Parent p1=new Child();
		p1.methodOne();
		
		Child c1=new Parent(); // invalid 
		
	}
}

conclusion
-----------
Whatever parent class contains property by default it goes to child.
But whatever child class contains property it never goes back to parent.

A parent reference can hold child object but child reference can't hold parent object.


Inheritance
============
Inheritance is a mechanism in which we will derived a class in the presence of existing class.
or
Inheritance is a mechanism in which one class will inherit the properties of another class.

Using extends keyword we can implements inheritance in java.

The main objective of inheritance is to achieve reusability.

Diagram: java29.1

We have following list of inheritance.

1) Single level inheritance

2) Multi level inheritance 

3) Multiple inheritance 

4) Hierarchical inheritance 

5) Hybrid inheritance 

1) Single level inheritance
-----------------------------
If we derived a class in the presence of one base class is called single level inheritance.

Diagram:
		A  (Parent/Base/Super class)
		|
		|
		|
		B  (Child/Derived/Sub class)

ex:
---
class A 
{
	int i=10;
}
class B extends A 
{
	int j=20;
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new A();
		System.out.println(a.i); //10
		
		B b=new B();
		System.out.println(b.i+" "+b.j);//10  20
		
	}
}

ex:
----
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
	}
}

2) Multi level inheritance 
---------------------------
If we derived a class in the presence of one base class and that class is derived from another base class is called multi level inheritance.

Diagram:
		A
		|
		|
		|
		B
		|
		|
		|
		C 

class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends B  
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m2();
		c.m3();
		
	}
}



3) Multiple inheritance
------------------------
In java, a class can't extends more then one class simultenously because java does not support multiple inheritance.
ex:
	class A 
	{
	}
	class B 
	{
	}
	class C extends A,B  --> invalid 
	{
	}

But interface can extends more then one interface so we can achieve multiple inheritance concept through interfaces.
ex:
	interface A 
	{
	}
	interface B 
	{
	}
	interface C extends A,B  --> valid 
	{
	}

If we won't extends any other class then our class is a direct child class of Object class.

ex:				Diag:
	class A 			Object
	{				|
	}				|
					A 

If our class extends some other class then it is a indirect child class of Object class.
ex:				Diag:
	class A 			Object
	{				|
	}				|
	class B extends A 		A 
	{				|
	}				|
					B 

Java does not support cyclic inheritance.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}


Q) Why java does not support multiple inheritance?

There may chance of raising ambiguity problem that's why java does not support multiple inheritance.

ex:
		P1.m1()			P2.m1()
		|----------------------------|
				|
				C.m1()





4) Hierarchical inheritance 
-------------------------
If we derived multiple classes in the presence of one base class is called hierarchical inheritance.

Diag:
			A 
			|
	|-------------------------------|
	B				C

ex:
----
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends A  
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m3();
		
	}
}


5) Hybrid inheritance 
---------------------
Hybrid inheritance is a combination of more then one inheritance.

Java does not support hybrid inheritance.


Diag:
			A 
			|
	|-------------------------------|
	B				C
	|-------------------------------|
			|
			D 



Has-A relationship
==================
Has-A relationship is also known as composition and aggregation.

There is no specific keyword to implements Has-A relationship but mostly we will use new operator.

The main objective of Has-A relationship is to provide reusability.

Has-A relationship will increase dependency between two components.

ex:
	class Student
	{
		-
		- // student related functionality 
		-
	}
	class Course
	{
		Student s=new Student();
		-
		-	
	}

ex:
----
class Ihub
{
	public String courseName()
	{
		return "FSD-JAVA+AWS";
	}
	public double courseFee()
	{
		return 30000d;
	}
	public String trainerName()
	{
		return "Niyaz Sir";
	}
}
class Usha 
{
	public void getCourseDetails()
	{
		Ihub i=new Ihub();
		System.out.println("Course Name : "+i.courseName());
		System.out.println("Course Fee : "+i.courseFee());
		System.out.println("Trainer Name : "+i.trainerName());
	}
}
class Student
{
	public static void main(String[] args)
	{
		Usha u=new Usha();
		u.getCourseDetails();
	}
}

composition
============
Without existing container object there is no chance of having contained object then the relationship between container and contained object is called composition which is strongly association.

Diagram: java29.2


Aggregation 
==============
Without existing container object there is a chance of having contained object then the relationship between container and contained object is called aggreation which is loosely association.

Diagram: java29.3


Method overloading
===================
Having same method name with different parameters or signatures in a single class is called method overloading.

All the methods present in a class are called overloaded methods.

Method overloading will reduce complexity of the programming.

ex:
--

class MeeSeva 
{
	//overloaded methods 
	
	public void search(int voterId)
	{
		System.out.println("Details Found via voterId");
	}
	public void search(String houseNo)
	{
		System.out.println("Details Found via houseNo");
	}
	public void search(long aadharNo)
	{
		System.out.println("Details Found via aadharno");
	}
}
class Test  
{
	public static void main(String[] args)
	{
		MeeSeva ms=new MeeSeva();
		ms.search(101);
		ms.search("1-6-65/1/A");
		ms.search(1234L);
	}
}
































































