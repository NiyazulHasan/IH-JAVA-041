A try with finally combination is valid in java.

ex:

class Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=null;
		String name=null;
		try
		{
			sc=new Scanner(System.in);
			
			System.out.println("Enter the name :");
			name=sc.next();

			System.out.println("Welcome :"+name);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			sc.close();
		}
	}
}




Q) What is the difference between final, finally and finalize method?

final
----
final is a modifier which is applicable for variables, methods and classes.
If we declare any variable as final then reassignment of that variable is not possible.
If we declare any method as final then overriding of that method is not possible.
If we declare any class as final then creating child class is not possible.

finally
--------
It is a block which contains cleanup code and it should execute irrespective of exception raised or not.

finalize 
---------
It is a method called by garbage collector just before destroying an object for cleanup activity.

try with resources
===================
A "try-with-resources" introduced in Java 7.

A "try-with-resources" is a try statement that declares one or more resources. 

A resource is as an object that must be closed after finishing the program.

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		try(Scanner sc=new Scanner(System.in);)
		{
			System.out.println("Enter the name :");
			String name=sc.next();
			System.out.println("Welcome :"+name);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

throw statement
================
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide number by zero");

Diagram: java37.1


throws statement
================
If any checked exception raised in our program we must and should handle that exception by using try and catch block or by using throws statement.

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java");
		}
		catch(InterruptedException ie)
		{
			ie.printStackTrace();
		}
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)throws InterruptedException  
	{	
			Thread.sleep(5000);
			System.out.println("Welcome to Java");
	}
}

ex:
----
class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args)throws ClassNotFoundException
	{	
		Class.forName("Test");
	}
}


2) Userdefined exceptions
==========================
Exceptions which are created by the user based on the application requirements are called userdefined exceptions or customized exceptions.

ex:
	NoInterestInJavaException 
	NoPracticeException 
	NoJobException 
	and etc.

ex:
---
import java.util.Scanner;

class NotEligibleException extends RuntimeException 
{
	NotEligibleException(String str)
	{
		super(str);
	}
}
class EligibleException extends RuntimeException 
{
	EligibleException(String str)
	{
		super(str);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
		if(age<18)
			throw new NotEligibleException("U r not eligible to vote");
		else
			throw new EligibleException("U r eligible to vote");
	}
}


Garbage Collector
=================
Garbage collector is a deamon thread which is used to destroy unused or useless objects in java.

There are two ways to call garbage collector in java.

1) System.gc() 

2) Runtime.getRuntime().gc() 

ex:
---
class Test 
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);

		t=null;
		System.gc();
	}
	public void finalize()
	{
		System.out.println("finalize-method");
	}
}

ex:
---
class Test 
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);

		t=null;
		Runtime.getRuntime().gc();
	}
	public void finalize()
	{
		System.out.println("finalize-method");
	}
}

Singleton class
===============
A class which allows us to create only one object is called singleton class.

Singleton is a design pattern which allows us to create a single instance.

To create a singleton class we required private constructor and static method.

ex:

class Singleton
{
	static Singleton single=null;

	//private constructor
	private Singleton()
	{
	}

	//static method 
	public static Singleton getInstance()
	{
		if(single==null)
		{
			single=new Singleton();
		}
		return single;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());

		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}


































































