Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 5

		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 10

		int max=(a>b)?a:b;

		System.out.println(max+" is greatest");
	}
}

Q) Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 5

		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 10

		System.out.println("Enter the third number :");
		int c=sc.nextInt(); // 2

		int max=(a>b)?((a>c)?a:c):((b>c)?b:c);

		System.out.println(max+" is greatest");
	}
}

3) Logical operators
----------------------

Logical AND operator (&&)
--------------------------
Logical AND operator deals with boolean values either true or false.

Truth table
----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true && true); // true 
		System.out.println(true && false); // false 
		System.out.println(false && true); // false
		System.out.println(false && false); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<10);

		System.out.println(b); // true 
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) && (6<10);

		System.out.println(b); // false
	}
}





Logical OR operator (||)
-------------------------
Logical OR operator deals with boolean values either true or false.

Truth table 
------------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true || true  ); //true
		System.out.println(true || false ); //true
		System.out.println(false || true ); //true
		System.out.println(false || false );//false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) || (10<100);

		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5<1) || (6<2);

		System.out.println(b); // false
	}
}

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) && (6<10) || (1>-4);

		System.out.println(b); // true 
	}
}


Q) 
  Jack wants to buy a shoe and he went a big showroom to finalize the shoe.But
  he has a myth that if shoe price is divisible by 3 and 5 then only he can buy
  that shoes?

 Input:
	 1000	

 output:
	 Jack can't buy the show 

ex:
--
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the shoe price :");
		int price=sc.nextInt();

		String msg=((price%3==0) && (price%5==0))?"He can buy the shoes":"He can't buy the shoes";
		
		System.out.println(msg);
	}
}




Logical NOT operator (!)
------------------------
Logical NOT operator deals with boolean value either true or false.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=!(5>2);
		
		System.out.println(b); // false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=!(5>20);
		
		System.out.println(b); // true
	}
}


How to convert decimal number to binary number
-----------------------------------------------

	10 - decimal number
	1010 - binary number 

	2|10
	 ---- 0 
	2|5
	 ---- 1
	2|2
	 ---- 0		^
	  1		|	
	-----------------
	1010


How to convert binary number to decimal number
-----------------------------------------
	
	10 - decimal number 

	1010 - binary number 


	1010  <---

	0*1  + 1*2  + 0*4  +  1*8

	0 + 2 + 0 + 8  = 10	


4) Bitwise operators
---------------------

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table
------------
T	T 	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a & b ;

		System.out.println(c); //10
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010 <---

	0*1 + 1*2 + 0*4 + 1*8 

	0 + 2 + 0 + 8 = 10
*/



ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a & b ;

		System.out.println(c); //0
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	&  - 0000 <---


*/

Bitwise OR operator 
-------------------
Bitwise OR operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a | b ;

		System.out.println(c); //15
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	|  - 1111 <---

	1*1 + 1*2 + 1*4 + 1*8 

	1 + 2 + 4 + 8 = 15
*/



Bitwise XOR operator (^)
------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
-----------
T	T	= F
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a ^ b ;

		System.out.println(c); //5
	}
}
/*
	10 - 1010
	15 - 1111
	-----------
	^  - 0101 <---

	1*1 + 0*2 + 1*4 +  0*8 

	1 + 0 + 4 + 0 = 5
*/

Bitwise NOT operator (~)
--------------------------
class Test  
{
	public static void main(String[] args) 
	{
		int i=~10;

		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~67;;

		System.out.println(i); // -68
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(-7);

		System.out.println(i); // 6
	}
}




5) Arithmetic operators
----------------------
% - modules 
/ - divison
* - multiplication 
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 5+6%3+7/2+8*2+10%20+6/100+2-20;

		System.out.println(i); // 16
	}
}
/*
	5 + 6%3 + 7/2 + 8*2 + 10%20 + 6/100 + 2 - 20

	5 + 0  +  3  +  16  +  10  +  0 + 2 - 20 

	36 - 20 = 16 
*/


6) Relational operators 
------------------------
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); // false 

		System.out.println(10 >= 20); // false

		System.out.println(10 < 20); // true

		System.out.println(10 <= 10); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true

		System.out.println(10 == 20); // false

		System.out.println(10 != 20); // true

		System.out.println(10 != 10); // false
	}
}





































































































