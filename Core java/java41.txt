Q) Write a java program to compare two dates?

import java.time.*;
class Test 
{
	public static void main(String[] args) 
	{
		LocalDate date1=LocalDate.of(2024,12,13);
		LocalDate date2=LocalDate.now();

		if(date1.compareTo(date2)>0)
			System.out.println("Date1 is greatest");
		else if(date1.compareTo(date2)<0)
			System.out.println("Date2 is greatest");
		else
			System.out.println("Both are same");
	}
}

Q) Write a java program to display distinct elements from given array?

Input:
	1 2 2 3 3 3 4 4 4 4 

Output:
	1 2 3 4 

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};

		Set<Integer> set=new LinkedHashSet<Integer>();

		for(int i:arr)
		{
			set.add(i);
		}

		//for each loop
		for(int i:set)
		{
			System.out.print(i+" ");
		}

	}
}

Map
=====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in key and value pair then we need to use Map interface.

Key and value both must be objects.

key can't be duplicate but value can be duplicate.

Each key and value pair is called one-entry.


Diagram: java41.1


HashMap
---------
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes hash code of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for both key and values.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put("one","raja");
		hm.put("six","alan");
		hm.put("nine","kelvin");
		hm.put("five","brook");
		System.out.println(hm);//{nine=kelvin, six=alan, one=raja, five=brook}

		hm.put("one","gogo");
		System.out.println(hm);//{nine=kelvin, six=alan, one=gogo, five=brook}

		hm.put(1,100);
		System.out.println(hm);//{nine=kelvin, 1=100, six=alan, one=gogo, five=brook}
		
		hm.put(null,null);
		System.out.println(hm);//{null=null, nine=kelvin, 1=100, six=alan, one=gogo, five=brook}
	}
}

ex:
--
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("one","raja");
		hm.put("six","alan");
		hm.put("nine","kelvin");
		hm.put("five","brook");
		
		Set s=hm.keySet();
		System.out.println(s);//[nine, six, one, five]

		Collection c = hm.values();
		System.out.println(c);//[kelvin, alan, raja, brook]

		Set s1=hm.entrySet();
		System.out.println(s1); //[nine=kelvin, six=alan, one=raja, five=brook]
	}
}

LinkedHashMap
-------------
It is a child class of HashMap class.

LinkedHashMap is exactly same as HashMap class with following differences.

HashMap						LinkedHashMap
-----------					-------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedHashMap lhm=new LinkedHashMap();
		lhm.put("one","raja");
		lhm.put("six","alan");
		lhm.put("nine","kelvin");
		lhm.put("five","brook");
		System.out.println(lhm);//{one=raja, six=alan, nine=kelvin, five=brook}

		lhm.put("one","gogo");
		System.out.println(lhm);//{one=gogo, six=alan, nine=kelvin, five=brook}	

		lhm.put(1,100);
		System.out.println(lhm);//{one=gogo, six=alan, nine=kelvin, five=brook, 1=100}

		lhm.put(null,null);
		System.out.println(lhm);//{one=gogo, six=alan, nine=kelvin, five=brook, 1=100, null=null}
	}
}


ex:
--
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Map<String,String> map=new LinkedHashMap<String,String>();
		map.put("one","raja");
		map.put("six","alan");
		map.put("nine","kelvin");
		map.put("five","brook");
		
		for(Map.Entry<String,String> entry: map.entrySet())
		{
			System.out.println(entry.getKey()+"="+entry.getValue());
		}

	}
}


Q) Write a java program to display occurance of a given string?

Input:
	this is is java java class

Output:
	this=1  is=2  java=2  class=1

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		String str="this is is java java class";

		String[] sarr=str.split(" ");

		Map<String,Integer> map=new LinkedHashMap<String,Integer>();
		
		for(String s:sarr)
		{
			if(map.get(s)!=null)
			{
				map.put(s,map.get(s)+1);
			}
			else
			{
				map.put(s,1);
			}
		}

		System.out.println(map);
	}
}

Q) Write a java program to display occurance of characters in a given string?

Input:
	java
Output:
	j=1 a=2 v=1 

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		String str="java";

		char[] carr=str.toCharArray();

		Map<Character,Integer> map=new LinkedHashMap<Character,Integer>();
		
		for(char c:carr)
		{
			if(map.get(c)!=null)
			{
				map.put(c,map.get(c)+1);
			}
			else
			{
				map.put(c,1);
			}
		}

		System.out.println(map);
	}
}


Q) Write a java program to display lucky number from given array?

Input:
	2 6 6 7 7 7 3 3 4 4 4 4

Output:
	4 


Input:
	1 2 2 3 3 3 4 4 4 4 

Output:
	4 

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};

		Map<Integer,Integer> map=new LinkedHashMap<Integer,Integer>();

		for(int i:arr)
		{
			if(map.containsKey(i)!=false)
			{
				map.put(i,map.get(i)+1);
			}
			else
			{
				map.put(i,1);
			}
		}

		int x=0;
		int max=-1;

		for(Map.Entry<Integer,Integer> entry:map.entrySet())
		{
			if(entry.getKey() == entry.getValue())
			{
					x = entry.getKey();

					max = Math.max(max,x);
			}
		}

		System.out.println(max);
	}
}

TreeMap
==========
The underlying data structure is RED BLACK TREE.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes sorting order of the key.

If we depend upon default natural sorting order then keys can be homogeneous and comparable.

If we depend upon customized sorting order then keys can be hetrogeneous and non-comparable.

Key can't be null but value can be null.

ex:
--
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1,"one");
		tm.put(10,"ten");
		tm.put(5,"five");
		System.out.println(tm);//{1=one, 5=five, 10=ten}

		tm.put(1,"gogo");
		System.out.println(tm);//{1=gogo, 5=five, 10=ten}

		tm.put(4,null);
		System.out.println(tm);//{1=gogo, 4=null, 5=five, 10=ten}

		tm.put(null,"four");
		System.out.println(tm);// R.E NullPointerException
	}
}


Hashtable
===========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes descending order of the key.

Both key and value can be hetrogeneous.

Both key and value can't be null.

ex:
---

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
		ht.put(1,"one");
		ht.put(10,"ten");
		ht.put(5,"five");
		System.out.println(ht);//{10=ten, 5=five, 1=one}

		ht.put(1,"gogo");
		System.out.println(ht);//{10=ten, 5=five, 1=gogo}

		//ht.put(4,null);
		//System.out.println(ht);//R.E NullPointerException


		//ht.put(null,"four");
		//System.out.println(ht);// R.E NullPointerException


	}
}



























































