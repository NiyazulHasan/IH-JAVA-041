Generics
=========
Every array consider as typesafe. 

It means we can give guarantee that what type of elements are present in array.

If requirement is there to hold string values then it is recommanded to use String[] array.If we are trying to insert any other element then we will get compile time error.

ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	sarr[2]=10;   // invalid 

Collections are not consider as typesafe.

It means we can't give guarantee that what type of elements are present in Collections.

If requirement is there to hold string values then it is never recommanded to use ArrayList. If we are trying to insert any other elements then our program may get failure at runtime.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(new Integer(10));
	-
	-
	String val1=(String)al.get(0);
	String val2=(String)al.get(1);
	String val3=(String)al.get(2); // invalid 

At the time of retrieving the data from array we don't need to perform typecasting.

ex:
	
	int[] arr=new int[10];
	arr[0]=10;
	arr[1]=20;
	-
	-
	int val=arr[0];

At the time of retrieving the data from Collection, compulsary we need to perform typecasting.

ex:
	ArrayList al=new ArrayList();
	al.add("Hi");
	al.add("Bye");
	-
	-
	String val=(String)al.get(0);

To overcome this limitation Sun Micro System introduced Generics concept in 1.5v.

The main objective of Generics are

1) To make Collections as typesafe.

2) To avoid typecasting problem.



java.util package
==================

Q) What is the difference between Arrays and Collections?

Arrays						Collections
----------					--------------
It is a collection of homogeneous data 		It is a collection of homogeneous and hetrogeneous 
elements.					data elements.

Arrays are fixed in size.			Collections are growable in nature.

Performance point of view arrays are 		Memory point of view Collections are recommanded
recommanded to use.				to use.

It can hold primitive types and object types.	It can hold only object types.

It is typesafe by default.			It is not typesafe by default.

Arrays are not implemented based on data 	Collections are implemented based on data structure
structure concept.Hence we can't expect 	concept.Hence we can expect ready made methods.
any ready made methods.So for every logic 
we need to write the code explicitly.


Collection Framework
====================
Collection framework defines several utility classes and interfaces to represent group of objects in a single entity.
ex:
	Java		Collection Framework 
	C++		STL (Standard Template Libraray)



Collection
===========
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains some common methods which are available for entire Collection objects.

ex:
	cmd>  javap  java.util.Collection 

ex:
	public abstract int size();
 	public abstract boolean isEmpty();
  	public abstract boolean contains(java.lang.Object);
  	public abstract java.util.Iterator<E> iterator();
  	public abstract java.lang.Object[] toArray();
  	public abstract <T> T[] toArray(T[]);
  	public default <T> T[] toArray(java.util.function.IntFunction<T[]>);
  	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
  	public abstract boolean removeAll(java.util.Collection<?>);
  	public default boolean removeIf(java.util.function.Predicate<? super E>);
  	public abstract boolean retainAll(java.util.Collection<?>);
  	public abstract void clear();
  	public abstract boolean equals(java.lang.Object);
  	public abstract int hashCode();
  	public default java.util.Spliterator<E> spliterator();
  	public default java.util.stream.Stream<E> stream();
  	public default java.util.stream.Stream<E> parallelStream();

List
=====
It is a child interface of Collection of interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: java39.1


ArrayList
-------------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]

		al.add("one");
		System.out.println(al); //[one,two,three,one]

		al.add(10);
		System.out.println(al); //[one,two,three,one,10]

		al.add(null);
		System.out.println(al); // [one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]

		al.add("one");
		System.out.println(al); //[one,two,three,one]

		al.add(null);
		System.out.println(al); // [one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]

		al.add(1,"raja");
		System.out.println(al);//[one,raja,two,three]

		System.out.println(al.isEmpty());//false

		System.out.println(al.contains("two")); // true 

		al.remove("raja");
		System.out.println(al);//[one,two,three]

		al.clear();
		System.out.println(al);//[]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList();
		list.add("one");
		list.add("two");
		list.add("three");
		System.out.println(list);//[one,two,three]

		for(int i=0;i<list.size();i++)
		{
			String s=list.get(i);
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(4,8,1,3,9,6);
		System.out.println(list);
	}
}

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList<String> javaCourse=new ArrayList<String>();
		javaCourse.add("html");
		javaCourse.add("java");
		javaCourse.add("css");
		javaCourse.add("oracle");
		javaCourse.add("springboot");
		System.out.println(javaCourse);

		ArrayList<String> pythonCourse=new ArrayList<String>();
		pythonCourse.add("html");
		pythonCourse.add("python");
		pythonCourse.add("css");
		pythonCourse.add("oracle");
		pythonCourse.add("django");
		System.out.println(pythonCourse);

		javaCourse.retainAll(pythonCourse);

		System.out.println(javaCourse);

	}
}


LinkedList 
-----------
The underlying data structure is doubly LinkedList.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and Deque interface.

A LinkedList contains following methods.

ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);
	
ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); //[one,two,three]

		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]

		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]

	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); //[one,two,three]

		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo,one,two,three,jojo]

		System.out.println(ll.getFirst()); //gogo
		System.out.println(ll.getLast()); //jojo

		ll.removeFirst(); 
		ll.removeLast();

		System.out.println(ll); //[one,two,three]

	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1); //[one,two,three]

		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2);//[raja]

		ll2.addAll(ll1);
		System.out.println(ll2);//[raja,one,two,three]

		System.out.println(ll2.containsAll(ll1)); // true 

		ll2.removeAll(ll1);
		System.out.println(ll2); //[raja]
	}
}


Q) What is the difference between ArrayList and LinkedList ?

ArrayList					LinkedList 
------------					---------------
The underlying data structure is resizable 	The underlying data structure is doubly LinkedList.
array or growable array.

ArrayList is better for storing and accessing	LinkedList is better for manipulating data.
data.

The memory location for the elements of		The location for the elements of a linked list
an ArrayList is contiguous.			is not contagious.

When an ArrayList is initialized, a default	There is no case of default capacity in a
capacity of 10 is assigned to the ArrayList.	LinkedList






































































