Q) Types of data structures in java?

Diagram: java42.1


Types of cursors in java
=========================
Cursor is used to retrieve the objects one by one from Collections.

We have three types of cursors.

1) Enumeration 

2) Iterator 

3) ListIterator 

1) Enumeration 
---------------
Enumeration is used to retrieve the objects one by one from legacy Collection objects.

We can create Enumeration object as follow.

ex:
	Enumeration e=v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean hasMoreElements()
	public Object nextElement() 

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}

		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i =(Integer)e.nextElement();
			System.out.println(i);
		}
	}
}

Limitations:

> Enumreation is used read objects only from legacy Collection objects.Hence it is not a universal cursor.

> Using Enumeration we can perform read operation but not remove operation.

> To overcome this limitations, Sun Micro System introduced Iterator.

2) Iterator 
--------------
It is used to read the objects one by one from any Collection object.Hence it is a universal cursor.

Using Iterator we can perform read and remove operations.

We can create Iterator object as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.

ex:
	public boolean hasNext()
	public Object next()
	public void remove()

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}

		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
				System.out.println(i);
			else
				itr.remove();
		}

		System.out.println(al);//[2,4,6,8,10]
	}
}

Limitations:

> Using Enumeration and Iterator we can read objects only in forward direction but not in backward direction.Hence they are not bi-directional cursors.

> Using Iterator we can perform read and remove operation but not adding and replacement of new objects.

> To overcome this above limitations , Sun Micro System introduced ListIterator.


3) ListIterator
--------------
It is a child interface of Iterator interface.

ListIterator is used to read objects one by one from List Collection objects only.

Using ListIterator we can perform read, remove, adding and replacement of new objects.

We can create ListIterator object as follow.

ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following nine methods.

ex:
	public boolean hasNext()
	public Object next()
	public boolean hasPrevious()
	public Object previous()
	public void nextIndex()
	public void previousIndex()
	public void remove() 
	public void set(Object o)
	public void add(Object o)

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s = (String) litr.next();
			System.out.println(s);
		}
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s = (String) litr.next();
			
			if(s.equals("bala"))
			{
				litr.remove();
			}
		}

		System.out.println(al);//[venki,chiru,nag]
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s = (String) litr.next();
			
			if(s.equals("chiru"))
			{
				litr.add("pawan");
			}
		}

		System.out.println(al);//[venki,chiru,pawan, bala,nag]
		
	}
}

ex
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s = (String) litr.next();
			
			if(s.equals("bala"))
			{
				litr.set("ntr");
			}
		}

		System.out.println(al);//[venki,chiru,ntr,nag]
		
	}
}

Requirement
===========

import java.util.*;

interface IEmployee
{
	public void  addEmployee();
	public List<Employee> getAllEmployees();
}

class Employee 
{
	private int empId;
	private String empName;
	private double empSal;

	//parameterized constructor
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}

class EmployeeImpl implements IEmployee
{
	List<Employee> list=new ArrayList<Employee>();

	public void  addEmployee()
	{
		list.add(new Employee(101,"Alan",1000d));
		list.add(new Employee(102,"Jose",2000d));
		list.add(new Employee(103,"Mark",3000d));
		list.add(new Employee(104,"Lisa",4000d));
	}

	public List<Employee> getAllEmployees()
	{
		return list;
	}
}

class Test 
{
	public static void main(String[] args)
	{
		IEmployee e=new EmployeeImpl();
		
		e.addEmployee();

		List<Employee> list=e.getAllEmployees();

		Iterator itr=list.iterator();
		while(itr.hasNext())
		{
			Employee e1=(Employee)itr.next();
			System.out.println(e1.getEmpId()+" "+e1.getEmpName()+" "+e1.getEmpSal());
		}

	}
}

Interview Question
==================
Q) Write a java program to display the output in a given format?

Input:
	 abc.txt 

Output:
	txt 

ex:
--
class Test 
{
	public static void main(String[] args)
	{
		String fileName="abc.txt";
		
		int index=fileName.lastIndexOf('.');

		System.out.println(fileName.substring(index+1));
	}
}



Multithreading
==============

Q) What is the difference between Thread and Process?

Thread 
-------
	A thread is a light weight sub process.
	We can run multiple threads concurently.
	One thread can communicate with another thread.
	ex:
		A class is one thread 
		A block is one thread 
		A constructor is one thread	

Process
-------
	A process is a collection of threads.
	We can run multiple processes concurently.
	One process can't communication with another process.
	ex:
		Typing the notes in editor is one process
		Taking a class using zoom meeting is one process
		Download a file from internet is one process



Q) What is multitasking?

Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Thread based multitasking 
--------------------------
Executing several task simultenously where each task is a same part of a program such type of multitasking is called thread based multitasking.

It is best suitable for programmatic level.


2) Process based multitasking 
-------------------------------
Executing several task simultenously where each task is a independent process such type of multitasking is called process based multitasking.

It is best suitable for OS level.


Q) What is multithreading?

Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by a JAVA API.

The main important application area of multithreading are

1) To implements multimedia graphics.

2) To develop video games.

3) To develop animations.


Ways to start a thread in java
==============================
There are two ways to start a thread in java.

1) By extending Thread class 

2) By implementing Runnable interface 


1) By extending Thread class 
----------------------------
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantitate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread Schedular 
------------------------
If multiple threads are waiting for execution which thread has to be execute will decided by the thread schedular.

What algorithm, behaviour or mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.


case2: Difference between t.start() and t.run() method
-------------------------------------------------------
If we invoke t.start() method, a new thread will be created which is responsible to execute run() method automatically.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantitate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method, no new thread will be created but run() method will execute just like normal method.

ex:
--
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantitate a thread 
		MyThread t=new MyThread();

		// no new thread
		t.run();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case3: If we won't override run() method
------------------------------------------
If we won't override run() method then Thread class run() method will execute automatically.

Thread class run() method is a empty implementation.Hence we won't get any output from child thread.

ex:
---
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantitate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case4: If we overload run() method
-------------------------------------
If we overload run() method then Thread class start() method always execute run() method with zero parameter only.

ex:
--
class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantitate a thread 
		MyThread t=new MyThread();

		//start a thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case5: Life cycle of a thread
-----------------------------
Diagram: java42.2

Once if we create a thread then our thread will be in new or born state.

Once if we call t.start() method then our thread enters to ready or runnable state.

If thread schedular allocates to CPU then our thread goes to running state.

Once the run() method execution is completed then our thread enters to dead state.






































































