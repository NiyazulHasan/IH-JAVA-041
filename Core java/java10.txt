float							double
--------						---------
If we need 4 to 6 decimal point of accuracy then	If we need 14 to 16 decimal point of accuracy 
we need to use float.					then we need to use double.

Size : 4 byte (32 bits)					Size : 8 bytes (64 bits)

Range : -3.4e38 to 3.4e38				Range: -1.7e308 to 1.7e308

To declare a float value we need to suffix 		To declare a double value we need to suffix
with 'f' or 'F'.					with 'd' or 'D'.

ex:							ex:
	10.56f							10.56d;

ex:
	1) float f=10;
	   System.out.println(f); //10.0

	2) float f='a';
	   System.out.println(f); // 97.0

	3) float f="hi";
	   System.out.println(f); // C.T.E 

	4) float f=true;
	   System.out.println(f); // C.T.E 

	5) float f=10.56f;
	   System.out.println(f); // 10.56

ex:
	1) double d=10;
	   System.out.println(d); //10.0

	2) double d='a';
	   System.out.println(d); // 97.0

	3) double d="hi";
	   System.out.println(d); // C.T.E 

	4) double d=true;
	   System.out.println(d); // C.T.E 

	5) double d=10.56f;
	   System.out.println(d); // 10.56


boolean 
-------
It is used to represent boolean values either true or false.

Size: (Not Applicable)  (1-bit)
Range: (Not Applicable )

ex:
	1) boolean b="true";
	   System.out.println(b); // C.T.E 

	2) boolean b=TRUE;
	   System.out.println(b); // C.T.E 

	3) boolean b=true;
	   System.out.println(b); // true 

char
------
It is a single character which is enclosed in a single quotation.

Size: 2 bytes (16 bits)

Range : 0 to 65535 

ex:
	1) char ch='a';
	   System.out.println(ch); // a  

	2) char ch="A";
	   System.out.println(ch); // C.T.E 

	3) char ch=65;
	   System.out.println(ch); // A 	


Diagram: java10.1


Q) Write a java program to display range of byte datatype?

byte range : -128 to 127 

class Test
{
	public static void main(String[] args)
	{
		System.out.println(Byte.MIN_VALUE);
		System.out.println(Byte.MAX_VALUE);
	}
}


Q) Write a java program to display range of short datatype?

byte range : -32768 to 32767 

class Test
{
	public static void main(String[] args)
	{
		System.out.println(Short.MIN_VALUE);
		System.out.println(Short.MAX_VALUE);
	}
}

Q) Is java purely object oriented or not?

No, java will not consider as purely object oriented programming language because it does not support many OOPS concepts like multiple inheritance, operator overloading and more ever we depends upon primitive datatypes which are non-objects.


Types of variables
===================
A name given to a memory location is called variable.

Purpose of variable is used to store the data.

In java, we have two types of variables.

1) Primitive variables 
--------------------
	It is used to represent primitive values.

2) Reference variables 
---------------------
	It is used to represent object reference.
	ex:
		Student s=new Student();
			|
		reference variable 

Based on the position and execution these variables are divided into three types.

1) Instance variables / Non-static variables

2) Static variables / Global variables 

3) Local variables / Temperory variables / Automatic variables 

1) Instance variables
----------------------
A value of a variable which is varied(changes) from object to object is called instance variable.

Instance variable will be created at the time of object creation and it will destroy at the time of object destruction.Hence scope of instance variable is same as scope of an object.

Instance variable will store in heap area as a part of an object.

Instance variable must and should declare immediately after the class but not inside methods, blocks and constructors.

Instance variables we can access directly from instance area but we can't access directly from static area.

To access instance variable from static area we need to create object reference.

ex1:
----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		System.out.println(i); // C.T.E 
	}
}
o/p:
	C.T.E :  non-static variable i cannot be referenced from a static

ex:2
----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i); // 10
	}
}

Note:
-----
If we won't initialize any value to instance variable then JVM will initialized default values.

ex3:
---
class Test
{
	//instance variable
	boolean b;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.b); //false 
	}
}

ex:4
----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test();

		System.out.println(t1.i);//10
		System.out.println(t2.i);//10

		t1.i=100;

		System.out.println(t1.i);//100
		System.out.println(t2.i);//10
	}
}

ex:5
-----
class Test
{
	
	public static void main(String[] args)
	{
		Test t=new Test();
		t.m1();
	}
	//non-static method 	
	public void m1()
	{
		System.out.println("Instance-Method");		
	}
}

































































































































	